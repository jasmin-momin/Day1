//VAR
There are issues associated with variables declared with var, though. 
That is why it was necessary for new ways to declare variables to emerge.  
First, let's get to understand var more before we discuss those issues.
//SCOPE OF VAR           
Scope essentially means where these variables are available for use.
 var declarations are globally scoped or function/locally scoped.
The scope is global when a var variable is declared outside a function.
 This means that any variable that is declared with var outside a function block is available for use in the whole window.
var is function scoped when it is declared within a function. 
This means that it is available and can be accessed only within that function.

     var greeter = "hey hi";
    
    function newFunction() {
        var hello = "hello";
    }

   // var variables can be re-declared and updated
     This means that we can do this within the same scope and won't get an error.

    var greeter = "hey hi";
    var greeter = "say Hello instead";

and this also

    var greeter = "hey hi";
    greeter = "say Hello instead";


    //LET
  let is now preferred for variable declaration. 
  It's no surprise as it comes as an improvement to var declarations. 
  It also solves the problem with var that we just covered. Let's consider why this is so.

   //  let can be updated but not re-declared.
  Just like var,  a variable declared with let can be updated within its scope. Unlike var, a let variable cannot be re-declared within its scope. So while this will work:
  
      let greeting = "say Hi";
      greeting = "say Hello instead";

  this will return an error:
  
      let greeting = "say Hi";
      let greeting = "say Hello instead"; 
      // error: Identifier 'greeting' has already been declared


     // CONST
      Variables declared with the const maintain constant values.
       const declarations share some similarities with let declarations.
      
      //const declarations are block scoped
      Like let declarations, const declarations can only be accessed within the block they were declared.
      
      // const cannot be updated or re-declared
      This means that the value of a variable declared with const remains the same within its scope.
       It cannot be updated or re-declared.
        So if we declare a variable with const, we can neither do this:
      
          const greeting = "say Hi";
          greeting = "say Hello instead";// error: Assignment to constant variable. 

       
          

      nor this:
      
          const greeting = "say Hi";
          const greeting = "say Hello instead";// error: Identifier 'greeting' has already been declared

